{"version":3,"sources":["containers/Home.js","containers/Login.js","containers/NotFound.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","Login","props","useState","user","setUser","password","setPassword","event","a","preventDefault","alert","e","onSubmit","FormGroup","controlId","bsSize","ControlLabel","FormControl","autoFocus","value","onChange","target","type","Button","block","disabled","length","NotFound","Routes","path","exact","component","App","Navbar","fluid","collapseOnSelect","Header","Brand","to","Toggle","Collapse","Nav","pullRight","NavItem","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uPAGe,SAASA,IACtB,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,UACb,uCACA,yD,+ECFO,SAASC,EAAMC,GAAQ,IAAD,EACXC,mBAAS,IADE,mBAC5BC,EAD4B,KACtBC,EADsB,OAEHF,mBAAS,IAFN,mBAE5BG,EAF4B,KAElBC,EAFkB,iDAQnC,WAA4BC,GAA5B,SAAAC,EAAA,sDACED,EAAME,iBAIN,IAOIC,MAAM,aACR,MAAMC,IAGRD,MAAM,aAhBR,4CARmC,sBA4BnC,OACE,yBAAKX,UAAU,SACb,0BAAMa,SA9ByB,6CA+B7B,kBAACC,EAAA,EAAD,CAAWC,UAAU,OAAOC,OAAO,SACjC,kBAACC,EAAA,EAAD,aACA,kBAACC,EAAA,EAAD,CACEC,WAAS,EACTC,MAAOhB,EACPiB,SAAU,SAAAT,GAAC,OAAIP,EAAQO,EAAEU,OAAOF,WAGpC,kBAACN,EAAA,EAAD,CAAWC,UAAU,WAAWC,OAAO,SACrC,kBAACC,EAAA,EAAD,iBACA,kBAACC,EAAA,EAAD,CACEE,MAAOd,EACPe,SAAU,SAAAT,GAAC,OAAIL,EAAYK,EAAEU,OAAOF,QACpCG,KAAK,cAGT,kBAACC,EAAA,EAAD,CAAQC,OAAK,EAACT,OAAO,QAAQU,WA1C1BtB,EAAKuB,OAAS,GAAKrB,EAASqB,OAAS,GA0CgBJ,KAAK,UAA7D,W,OClDO,SAASK,IACtB,OACE,yBAAK5B,UAAU,YACb,uDCAS,SAAS6B,IACtB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWjC,IACjC,kBAAC,IAAD,CAAO+B,KAAK,SAASC,OAAK,EAACC,UAAW/B,IAEtC,kBAAC,IAAD,CAAO+B,UAAWJ,KCqBTK,MA1Bf,SAAa/B,GACX,OACE,yBAAKF,UAAU,iBACb,kBAACkC,EAAA,EAAD,CAAQC,OAAK,EAACC,kBAAgB,GAC5B,kBAACF,EAAA,EAAOG,OAAR,KACE,kBAACH,EAAA,EAAOI,MAAR,KACE,kBAAC,OAAD,CAAMC,GAAG,KAAT,YAEF,kBAACL,EAAA,EAAOM,OAAR,OAEF,kBAACN,EAAA,EAAOO,SAAR,KACE,kBAACC,EAAA,EAAD,CAAKC,WAAS,GACZ,kBAAC,gBAAD,CAAeJ,GAAG,WAChB,kBAACK,EAAA,EAAD,gBAEF,kBAAC,gBAAD,CAAeL,GAAG,UAChB,kBAACK,EAAA,EAAD,kBAKR,kBAACf,EAAD,QChBcgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,gBAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.b3f2b5c5.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Home.css\";\n\nexport default function Home() {\n  return (\n    <div className=\"Home\">\n      <div className=\"lander\">\n        <h1>Scratch</h1>\n        <p>A simple note taking app</p>\n      </div>\n    </div>\n  );\n}","import React, { useState } from \"react\";\nimport { Button, FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\nimport \"./Login.css\";\n\n//const getToken = require('@highpoint/get-ps-token');\n\nexport default function Login(props) {\n  const [user, setUser] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  function validateForm() {\n    return user.length > 0 && password.length > 0;\n  }\n\n  async function handleSubmit(event) {\n    event.preventDefault();\n\n    // use getToken to login to PS to obtain a PS_TOKEN\n    // keep track of the returned cookie jar for subsequent requests to PS APIs\n    try {\n        // const jar = await getToken({\n        // PS_HOSTNAME: 'a15a0015.ngrok.io',\n        // PS_ENVIRONMENT: 'ps',\n        // PS_USERNAME: user,\n        // PS_PASSWORD: password\n        // });\n        alert(\"logged In\");\n    } catch(e){\n        //alert(e.message);\n    }\n    alert(\"logged In\");\n\n  }\n\n  return (\n    <div className=\"Login\">\n      <form onSubmit={handleSubmit}>\n        <FormGroup controlId=\"user\" bsSize=\"large\">\n          <ControlLabel>User</ControlLabel>\n          <FormControl\n            autoFocus\n            value={user}\n            onChange={e => setUser(e.target.value)}\n          />\n        </FormGroup>\n        <FormGroup controlId=\"password\" bsSize=\"large\">\n          <ControlLabel>Password</ControlLabel>\n          <FormControl\n            value={password}\n            onChange={e => setPassword(e.target.value)}\n            type=\"password\"\n          />\n        </FormGroup>\n        <Button block bsSize=\"large\" disabled={!validateForm()} type=\"submit\">\n          Login\n        </Button>\n      </form>\n    </div>\n  );\n}","import React from \"react\";\nimport \"./NotFound.css\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h3>Sorry, page not found!</h3>\n    </div>\n  );\n}","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Home from \"./containers/Home\";\nimport Login from \"./containers/Login\";\nimport NotFound from \"./containers/NotFound\";\n\nexport default function Routes() {\n  return (\n    <Switch>\n      <Route path=\"/\" exact component={Home} />\n      <Route path=\"/login\" exact component={Login} />\n      { /* Finally, catch all unmatched routes */ }\n      <Route component={NotFound} />\n    </Switch>\n  );\n}","import { LinkContainer } from \"react-router-bootstrap\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Nav, Navbar, NavItem } from \"react-bootstrap\";\nimport \"./App.css\";\nimport Routes from \"./Routes\";\n\nfunction App(props) {\n  return (\n    <div className=\"App container\">\n      <Navbar fluid collapseOnSelect>\n        <Navbar.Header>\n          <Navbar.Brand>\n            <Link to=\"/\">Scratch</Link>\n          </Navbar.Brand>\n          <Navbar.Toggle />\n        </Navbar.Header>\n        <Navbar.Collapse>\n          <Nav pullRight>\n            <LinkContainer to=\"/signup\">\n              <NavItem>Signup</NavItem>\n            </LinkContainer>\n            <LinkContainer to=\"/login\">\n              <NavItem>Login</NavItem>\n            </LinkContainer>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n      <Routes />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}